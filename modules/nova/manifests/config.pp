class nova::config{
    Exec{
        path=>"/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/bin:/sbin",
        logoutput=>"on_failure",
    }
    define file($ip,$controller,$passwd){
        file{"/etc/nova/nova.conf":
            ensure=>present,
            content=>template("nova/nova.conf.erb"),
            require=>Class["nova::install"],
            notify=>Exec["sync1"],
        }
    }
    exec{"sync1":
        command=>"su -s /bin/sh -c \"nova-manage api_db sync\" nova",
        require=>File["/etc/nova/nova.conf"],
        notify=>Exec[sync2],
    }
    exec{"sync2":
        command=>"su -s /bin/sh -c \"nova-manage db sync\" nova",
        require=>Exec["sync1"],
        notify=>Service["nova-api"],
    }
    service{"nova-api":
        ensure=>running,
        hasstatus=>true,
        hasrestart=>true,
        enable=>true,
        require=>Exec["sync2"],
        notify=>Service["nova-consoleauth"],
    }
    service{"nova-consoleauth":
        ensure=>running,
        hasstatus=>true,
        hasrestart=>true,
        enable=>true,
        require=>Service["nova-api"],
        notify=>Service["nova-scheduler"],
    }
    service{"nova-scheduler":
        ensure=>running,
        hasstatus=>true,
        hasrestart=>true,
        enable=>true,
        require=>Service["nova-consoleauth"],
        notify=>Service["nova-conductor"],
    }
    service{"nova-conductor":
        ensure=>running,
        hasstatus=>true,
        hasrestart=>true,
        enable=>true,
        require=>Service["nova-scheduler"],
        notify=>Service["nova-novncproxy"],
    }
    service{"nova-novncproxy":
        ensure=>running,
        hasstatus=>true,
        hasrestart=>true,
        enable=>true,
        require=>Service["nova-conductor"],
        notify=>Class["neutron"],
    }
}
